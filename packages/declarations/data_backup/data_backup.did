type AggregateStats = record {
  total_number_of_not_bets : nat64;
  total_amount_bet : nat64;
  total_number_of_hot_bets : nat64;
};
type AllUserData = record {
  user_principal_id : principal;
  user_canister_id : principal;
  canister_data : UserOwnedCanisterData;
};
type BackupStatistics = record { number_of_user_entries : nat64 };
type BetDetails = record {
  bet_direction : BetDirection;
  bet_maker_canister_id : principal;
  amount : nat64;
  payout : BetPayout;
};
type BetDirection = variant { Hot; Not };
type BetOutcomeForBetMaker = variant {
  Won : nat64;
  Draw : nat64;
  Lost;
  AwaitingResult;
};
type BetPayout = variant { NotCalculatedYet; Calculated : nat64 };
type DataBackupInitArgs = record {
  known_principal_ids : opt vec record { KnownPrincipalType; principal };
  access_control_map : opt vec record { principal; vec UserAccessRole };
};
type FeedScore = record {
  current_score : nat64;
  last_synchronized_at : SystemTime;
  last_synchronized_score : nat64;
};
type HotOrNotDetails = record {
  hot_or_not_feed_score : FeedScore;
  aggregate_stats : AggregateStats;
  slot_history : vec record { nat8; SlotDetails };
};
type HotOrNotOutcomePayoutEvent = variant {
  WinningsEarnedFromBet : record {
    slot_id : nat8;
    post_id : nat64;
    room_id : nat64;
    post_canister_id : principal;
    winnings_amount : nat64;
    event_outcome : BetOutcomeForBetMaker;
  };
  CommissionFromHotOrNotBet : record {
    slot_id : nat8;
    post_id : nat64;
    room_pot_total_amount : nat64;
    room_id : nat64;
    post_canister_id : principal;
  };
};
type KnownPrincipalType = variant {
  CanisterIdUserIndex;
  CanisterIdPlatformOrchestrator;
  CanisterIdConfiguration;
  CanisterIdProjectMemberIndex;
  CanisterIdTopicCacheIndex;
  CanisterIdRootCanister;
  CanisterIdDataBackup;
  CanisterIdPostCache;
  CanisterIdSNSController;
  CanisterIdSnsGovernance;
  UserIdGlobalSuperAdmin;
};
type MintEvent = variant {
  NewUserSignup : record { new_user_principal_id : principal };
  Referral : record {
    referrer_user_principal_id : principal;
    referee_user_principal_id : principal;
  };
};
type Post = record {
  id : nat64;
  is_nsfw : bool;
  status : PostStatus;
  share_count : nat64;
  hashtags : vec text;
  description : text;
  created_at : SystemTime;
  likes : vec principal;
  video_uid : text;
  home_feed_score : FeedScore;
  view_stats : PostViewStatistics;
  hot_or_not_details : opt HotOrNotDetails;
  creator_consent_for_inclusion_in_hot_or_not : bool;
};
type PostStatus = variant {
  BannedForExplicitness;
  BannedDueToUserReporting;
  Uploaded;
  CheckingExplicitness;
  ReadyToView;
  Transcoding;
  Deleted;
};
type PostViewStatistics = record {
  total_view_count : nat64;
  average_watch_percentage : nat8;
  threshold_view_count : nat64;
};
type RoomBetPossibleOutcomes = variant { HotWon; BetOngoing; Draw; NotWon };
type RoomDetails = record {
  total_hot_bets : nat64;
  bets_made : vec record { principal; BetDetails };
  total_not_bets : nat64;
  room_bets_total_pot : nat64;
  bet_outcome : RoomBetPossibleOutcomes;
};
type SlotDetails = record { room_details : vec record { nat64; RoomDetails } };
type StakeEvent = variant {
  BetOnHotOrNotPost : record {
    bet_amount : nat64;
    post_id : nat64;
    bet_direction : BetDirection;
    post_canister_id : principal;
  };
};
type SystemTime = record {
  nanos_since_epoch : nat32;
  secs_since_epoch : nat64;
};
type TokenBalance = record {
  lifetime_earnings : nat64;
  utility_token_balance : nat64;
  utility_token_transaction_history : vec record { nat64; TokenEvent };
};
type TokenEvent = variant {
  Stake : record {
    timestamp : SystemTime;
    details : StakeEvent;
    amount : nat64;
  };
  Burn;
  Mint : record { timestamp : SystemTime; details : MintEvent; amount : nat64 };
  Transfer : record {
    to_account : principal;
    timestamp : SystemTime;
    amount : nat64;
  };
  HotOrNotOutcomePayout : record {
    timestamp : SystemTime;
    details : HotOrNotOutcomePayoutEvent;
    amount : nat64;
  };
  Receive : record {
    from_account : principal;
    timestamp : SystemTime;
    amount : nat64;
  };
};
type UserAccessRole = variant {
  CanisterController;
  ProfileOwner;
  CanisterAdmin;
  ProjectCanister;
};
type UserOwnedCanisterData = record {
  principals_i_follow : vec principal;
  token_data : TokenBalance;
  all_created_posts : vec record { nat64; Post };
  profile : UserProfile;
  principals_that_follow_me : vec principal;
};
type UserCanisterDetails = record {
  user_canister_id : principal;
  profile_owner : principal;
};
type UserProfile = record {
  unique_user_name : opt text;
  profile_picture_url : opt text;
  display_name : opt text;
  principal_id : opt principal;
  profile_stats : UserProfileGlobalStats;
  referrer_details : opt UserCanisterDetails;
};
type UserProfileGlobalStats = record {
  hot_bets_received : nat64;
  not_bets_received : nat64;
};
service : (DataBackupInitArgs) -> {
  get_current_backup_statistics : () -> (BackupStatistics) query;
  get_individual_users_backup_data_entry : (principal) -> (
      opt AllUserData,
    ) query;
  get_user_roles : (principal) -> (vec UserAccessRole) query;
  get_well_known_principal_value : (KnownPrincipalType) -> (
      opt principal,
    ) query;
  receive_all_token_transactions_from_individual_user_canister : (
      vec record { nat64; TokenEvent },
      principal,
    ) -> ();
  receive_all_user_posts_from_individual_user_canister : (
      vec Post,
      principal,
    ) -> ();
  receive_current_token_balance_from_individual_user_canister : (
      nat64,
      principal,
    ) -> ();
  receive_principals_i_follow_from_individual_user_canister : (
      vec principal,
      principal,
    ) -> ();
  receive_principals_that_follow_me_from_individual_user_canister : (
      vec principal,
      principal,
    ) -> ();
  receive_profile_details_from_individual_user_canister : (
      UserProfile,
      principal,
      principal,
    ) -> ();
  restore_backed_up_data_to_individual_users_canister : (principal) -> (text);
  send_restore_data_back_to_user_index_canister : () -> ();
  update_user_add_role : (UserAccessRole, principal) -> ();
  update_user_remove_role : (UserAccessRole, principal) -> ();
}
