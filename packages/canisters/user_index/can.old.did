type Result = variant { Ok; Err : SetUniqueUsernameError };
type SetUniqueUsernameError = variant {
  UsernameAlreadyTaken;
  SendingCanisterDoesNotMatchUserCanisterId;
  UserCanisterEntryDoesNotExist;
};
type SystemTime = record {
  nanos_since_epoch : nat32;
  secs_since_epoch : nat64;
};
type UpgradeStatus = record {
  version_number : nat64;
  last_run_on : SystemTime;
  failed_canister_ids : vec record { principal; principal };
  successful_upgrade_count : nat32;
};
type UserAccessRole = variant {
  CanisterController;
  ProfileOwner;
  CanisterAdmin;
  ProjectCanister;
};
service : {
  delete_user_index_reset_user_canisters : () -> ();
  get_index_details_is_user_name_taken : (text) -> (bool) query;
  get_user_canister_id_from_unique_user_name : (text) -> (opt principal) query;
  get_user_canister_id_from_user_principal_id : (principal) -> (
      opt principal,
    ) query;
  get_user_index_create_if_not_exists_else_return_canister_id_for_embedded_user_principal_id : () -> (
      principal,
    );
  get_user_roles : (principal) -> (vec UserAccessRole) query;
  update_index_with_unique_user_name_corresponding_to_user_principal_id : (
      text,
      principal,
    ) -> (Result);
  update_user_add_role : (UserAccessRole, principal) -> ();
  update_user_index_upgrade_user_canisters_with_latest_wasm : () -> (
      UpgradeStatus,
    );
  update_user_remove_role : (UserAccessRole, principal) -> ();
}