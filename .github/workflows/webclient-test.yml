name: Web-client tests
on:
  pull_request:
    branches: [main]
    paths:
      - "packages/web-client/**"
      - ".github/workflows/webclient-deploy.yml"
      - ".github/workflows/webclient-setup/action.yml"
      - ".github/workflows/webclient-test.yml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # svelte-check:
  #   timeout-minutes: 2
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: 18
  #         cache: "npm"
  #     - name: Install dependencies & build
  #       run: npm ci
  #     - name: Run sync
  #       run: npm run web-client:sync
  #     - name: Run svelte-check
  #       run: npm run web-client:check

  lighthouse-ci:
    name: Lighthouse
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "npm"
      - name: Install dependencies & build
        run: |
          npm install
          npm run web-client:build
      - name: run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: lhci-report
          path: lhci_report/
          retention-days: 15

  # playwright-linux:
  #   timeout-minutes: 60
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: 18
  #         cache: "npm"

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Cache Playwright browsers
  #       uses: actions/cache@v3
  #       id: playwright-cache
  #       with:
  #         path: "~/.cache/ms-playwright"
  #         key: "${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}"

  #     - name: Install Playwright Browsers
  #       if: steps.playwright-cache.outputs.cache-hit != 'true'
  #       run: npx playwright install --with-deps

  #     - name: Add Rust wasm target
  #       run: rustup target add wasm32-unknown-unknown

  #     - name: Install DFX
  #       run: DFX_VERSION=0.11.2 sh -ci "$(curl -fsSL https://smartcontracts.org/install.sh)"

  #     - name: Cache .dfx folder
  #       uses: actions/cache@v3
  #       id: dfx-cache
  #       with:
  #         path: "./.dfx"
  #         key: "${{ runner.os }}-dfx-folder-${{ hashFiles('./packages/ic/**') }}"

  #     - name: Cache target folder
  #       if: always()
  #       uses: actions/cache@v3
  #       id: target-cache
  #       with:
  #         path: "./target"
  #         key: "${{ runner.os }}-target-folder-${{ hashFiles('./packages/ic/**') }}"

  #     - name: Cache dfx identity
  #       if: always()
  #       uses: actions/cache@v3
  #       id: identity-cache
  #       with:
  #         path: "~/.config/dfx/identity"
  #         key: "${{ runner.os }}-identity-pem-${{ hashFiles('./packages/ic/**') }}"

  #     - name: Start DFX Server
  #       if: always()
  #       run: dfx start --background

  #     - name: Install canisters
  #       if: steps.dfx-cache.outputs.cache-hit != 'true'
  #       run: ./scripts/canisters/local_deploy/install_all_canisters.sh

  #     - name: Upgrade canister
  #       if: steps.dfx-cache.outputs.cache-hit == 'true'
  #       run: ./scripts/canisters/local_deploy/upgrade_all_canisters_without_test.sh

  #     - name: Test DFX connection
  #       if: always()
  #       run: dfx ping http://localhost:8000

  #     - name: Run Playwright tests
  #       run: npm run web-client:test
  #       env:
  #         runner: "linux"

  #     - name: Stop DFX Server
  #       run: dfx stop
  #       if: always()

  #     - uses: actions/upload-artifact@v3
  #       if: always()
  #       with:
  #         name: playwright-report
  #         path: packages/web-client/playwright-report/
  #         retention-days: 15
